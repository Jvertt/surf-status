{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n\n// const useFetch = (url) => {\n//     const [data, setData] = useState(null);\n//     const [isLoading, setIsLoading] = useState(true);\n//     const [error, setError] = useState(null);\n//     useEffect(() => {\n//         const abortCont = new AbortController();\n//         fetch(url, { signal: abortCont.signal})\n//             .then(res => {\n//                 if(!res.ok){\n//                     throw Error('error fetching data!')\n//                 }\n//                 return res.json()   \n//         })\n//             .then((data) => {\n//                 setData(data);\n//                 setIsLoading(false);    \n//                 setError(null)\n//             })\n//             .catch(err => {\n//                 if(err.name === \"AbortError\"){\n//                 } else{\n//                 setIsLoading(false)\n//                 setError(err.message);\n//                 }\n//             })\n\n//             return () => abortCont.abort()\n//         }, [url]);\n\n//         return { data, isLoading, error}\n// }\n\n// export default useFetch;","map":{"version":3,"names":[],"sources":["/Users/justinverthein/Development/code/phase-2/surf-status/src/useFetch.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n\n// const useFetch = (url) => {\n//     const [data, setData] = useState(null);\n//     const [isLoading, setIsLoading] = useState(true);\n//     const [error, setError] = useState(null);\n//     useEffect(() => {\n//         const abortCont = new AbortController();\n//         fetch(url, { signal: abortCont.signal})\n//             .then(res => {\n//                 if(!res.ok){\n//                     throw Error('error fetching data!')\n//                 }\n//                 return res.json()   \n//         })\n//             .then((data) => {\n//                 setData(data);\n//                 setIsLoading(false);    \n//                 setError(null)\n//             })\n//             .catch(err => {\n//                 if(err.name === \"AbortError\"){\n//                 } else{\n//                 setIsLoading(false)\n//                 setError(err.message);\n//                 }\n//             })\n\n//             return () => abortCont.abort()\n//         }, [url]);\n\n//         return { data, isLoading, error}\n// }\n\n// export default useFetch;"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}